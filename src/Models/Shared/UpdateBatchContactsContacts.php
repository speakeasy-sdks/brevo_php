<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test\BREVO\Models\Shared;


class UpdateBatchContactsContacts
{
    /**
     * Pass the set of attributes to be updated. **These attributes must be present in your account**. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}**.
     * 
     * Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in **SMS** field should be passed with proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}**
     * 
     * 
     * @var ?array<string, mixed> $attributes
     */
	#[\JMS\Serializer\Annotation\SerializedName('attributes')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $attributes = null;
    
    /**
     * Email address of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     * 
     * @var ?string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $email = null;
    
    /**
     * Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
     * 
     * @var ?bool $emailBlacklisted
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailBlacklisted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailBlacklisted = null;
    
    /**
     * Pass your own Id to update ext_id of a contact.
     * 
     * @var ?string $extId
     */
	#[\JMS\Serializer\Annotation\SerializedName('ext_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $extId = null;
    
    /**
     * id of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     * 
     * @var ?int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $id = null;
    
    /**
     * Ids of the lists to add the contact to
     * 
     * @var ?array<int> $listIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('listIds')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $listIds = null;
    
    /**
     * SMS of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
     * 
     * @var ?string $sms
     */
	#[\JMS\Serializer\Annotation\SerializedName('sms')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sms = null;
    
    /**
     * Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
     * 
     * @var ?bool $smsBlacklisted
     */
	#[\JMS\Serializer\Annotation\SerializedName('smsBlacklisted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $smsBlacklisted = null;
    
    /**
     * transactional email forbidden sender for contact. Use only for email Contact
     * 
     * @var ?array<string> $smtpBlacklistSender
     */
	#[\JMS\Serializer\Annotation\SerializedName('smtpBlacklistSender')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $smtpBlacklistSender = null;
    
    /**
     * Ids of the lists to remove the contact from
     * 
     * @var ?array<int> $unlinkListIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('unlinkListIds')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $unlinkListIds = null;
    
	public function __construct()
	{
		$this->attributes = null;
		$this->email = null;
		$this->emailBlacklisted = null;
		$this->extId = null;
		$this->id = null;
		$this->listIds = null;
		$this->sms = null;
		$this->smsBlacklisted = null;
		$this->smtpBlacklistSender = null;
		$this->unlinkListIds = null;
	}
}
