<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test\BREVO\Models\Shared;


/**
 * CustomContactFilter - Set the filter for the contacts to be exported.
 * 
 * 
 * 
 * @package test\BREVO\Models\Shared
 * @access public
 */
class CustomContactFilter
{
    /**
     * **Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on contacts as per the list id.
     * 
     * * **allContacts** - Fetch the list of all contacts for a particular list.
     * * **subscribed & unsubscribed** - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list.
     * * **unsubscribedPerList** - Fetch the list of contacts that are unsubscribed from a particular list only.
     * 
     * 
     * @var ?\test\BREVO\Models\Shared\ActionForContacts $actionForContacts
     */
	#[\JMS\Serializer\Annotation\SerializedName('actionForContacts')]
    #[\JMS\Serializer\Annotation\Type('enum<test\BREVO\Models\Shared\ActionForContacts>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ActionForContacts $actionForContacts = null;
    
    /**
     * **Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on email campaigns.
     * 
     * * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign.
     * * **clickers & nonClickers** - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign.
     * * **unsubscribed** - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign.
     * * **hardBounces & softBounces** - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
     * 
     * 
     * @var ?\test\BREVO\Models\Shared\ActionForEmailCampaigns $actionForEmailCampaigns
     */
	#[\JMS\Serializer\Annotation\SerializedName('actionForEmailCampaigns')]
    #[\JMS\Serializer\Annotation\Type('enum<test\BREVO\Models\Shared\ActionForEmailCampaigns>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ActionForEmailCampaigns $actionForEmailCampaigns = null;
    
    /**
     * **Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed.** This will export the contacts on the basis of provided action applied on sms campaigns.
     * 
     * * **unsubscribed** - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns.
     * * **hardBounces & softBounces** - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
     * 
     * 
     * @var ?\test\BREVO\Models\Shared\ActionForSmsCampaigns $actionForSmsCampaigns
     */
	#[\JMS\Serializer\Annotation\SerializedName('actionForSmsCampaigns')]
    #[\JMS\Serializer\Annotation\Type('enum<test\BREVO\Models\Shared\ActionForSmsCampaigns>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ActionForSmsCampaigns $actionForSmsCampaigns = null;
    
    /**
     * Considered only if **actionForEmailCampaigns** is passed, ignored otherwise. **Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed.**
     * 
     * The id of the email campaign for which the corresponding action shall be applied in the filter.
     * 
     * 
     * @var ?int $emailCampaignId
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailCampaignId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $emailCampaignId = null;
    
    /**
     * **Mandatory if actionForContacts is passed, ignored otherwise.** Id of the list for which the corresponding action shall be applied in the filter.
     * 
     * 
     * 
     * @var ?int $listId
     */
	#[\JMS\Serializer\Annotation\SerializedName('listId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $listId = null;
    
    /**
     * Considered only if **actionForSmsCampaigns** is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
     * 
     * 
     * 
     * @var ?int $smsCampaignId
     */
	#[\JMS\Serializer\Annotation\SerializedName('smsCampaignId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $smsCampaignId = null;
    
	public function __construct()
	{
		$this->actionForContacts = null;
		$this->actionForEmailCampaigns = null;
		$this->actionForSmsCampaigns = null;
		$this->emailCampaignId = null;
		$this->listId = null;
		$this->smsCampaignId = null;
	}
}
