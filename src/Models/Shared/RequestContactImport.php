<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test\BREVO\Models\Shared;


class RequestContactImport
{
    /**
     * To blacklist all the contacts for email
     * 
     * @var ?bool $emailBlacklist
     */
	#[\JMS\Serializer\Annotation\SerializedName('emailBlacklist')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emailBlacklist = null;
    
    /**
     * To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in Brevo, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( **only available if `updateExistingContacts` set to true **)
     * 
     * 
     * 
     * @var ?bool $emptyContactsAttributes
     */
	#[\JMS\Serializer\Annotation\SerializedName('emptyContactsAttributes')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $emptyContactsAttributes = null;
    
    /**
     * **Mandatory if fileUrl and jsonBody is not defined.** CSV content to be imported. Use semicolon to separate multiple attributes. **Maximum allowed file body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
     * 
     * 
     * 
     * @var ?string $fileBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileBody')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileBody = null;
    
    /**
     * **Mandatory if fileBody and jsonBody is not defined.** URL of the file to be imported (**no local file**). Possible file formats:
     * 
     * #### .txt, .csv, .json
     * 
     * 
     * @var ?string $fileUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileUrl = null;
    
    /**
     * **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files.
     * 
     * 
     * 
     * @var ?array<\test\BREVO\Models\Shared\JsonBody> $jsonBody
     */
	#[\JMS\Serializer\Annotation\SerializedName('jsonBody')]
    #[\JMS\Serializer\Annotation\Type('array<test\BREVO\Models\Shared\JsonBody>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $jsonBody = null;
    
    /**
     * **Mandatory if newList is not defined.** Ids of the lists in which the contacts shall be imported. For example, **[2, 4, 7]**.
     * 
     * 
     * 
     * @var ?array<int> $listIds
     */
	#[\JMS\Serializer\Annotation\SerializedName('listIds')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $listIds = null;
    
    /**
     * To create a new list and import the contacts into it, pass the listName and an optional folderId.
     * 
     * @var ?\test\BREVO\Models\Shared\NewList $newList
     */
	#[\JMS\Serializer\Annotation\SerializedName('newList')]
    #[\JMS\Serializer\Annotation\Type('test\BREVO\Models\Shared\NewList')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NewList $newList = null;
    
    /**
     * URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479
     * 
     * @var ?string $notifyUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('notifyUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notifyUrl = null;
    
    /**
     * To blacklist all the contacts for sms
     * 
     * @var ?bool $smsBlacklist
     */
	#[\JMS\Serializer\Annotation\SerializedName('smsBlacklist')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $smsBlacklist = null;
    
    /**
     * To facilitate the choice to update the existing contacts
     * 
     * @var ?bool $updateExistingContacts
     */
	#[\JMS\Serializer\Annotation\SerializedName('updateExistingContacts')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $updateExistingContacts = null;
    
	public function __construct()
	{
		$this->emailBlacklist = null;
		$this->emptyContactsAttributes = null;
		$this->fileBody = null;
		$this->fileUrl = null;
		$this->jsonBody = null;
		$this->listIds = null;
		$this->newList = null;
		$this->notifyUrl = null;
		$this->smsBlacklist = null;
		$this->updateExistingContacts = null;
	}
}
