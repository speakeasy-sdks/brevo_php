<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test\BREVO\Models\Shared;


class GetEmailEventReportEvents
{
    /**
     * UTC date-time on which the event has been generated
     * 
     * @var string $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $date;
    
    /**
     * Email address which generates the event
     * 
     * @var string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $email;
    
    /**
     * Event which occurred
     * 
     * @var \test\BREVO\Models\Shared\Event $event
     */
	#[\JMS\Serializer\Annotation\SerializedName('event')]
    #[\JMS\Serializer\Annotation\Type('enum<test\BREVO\Models\Shared\Event>')]
    public Event $event;
    
    /**
     * Sender email from which the emails are sent
     * 
     * @var ?string $from
     */
	#[\JMS\Serializer\Annotation\SerializedName('from')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $from = null;
    
    /**
     * IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)
     * 
     * @var ?string $ip
     */
	#[\JMS\Serializer\Annotation\SerializedName('ip')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ip = null;
    
    /**
     * The link which is sent to the user (only available if the event is requests or opened or clicks)
     * 
     * @var ?string $link
     */
	#[\JMS\Serializer\Annotation\SerializedName('link')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $link = null;
    
    /**
     * Message ID which generated the event
     * 
     * @var string $messageId
     */
	#[\JMS\Serializer\Annotation\SerializedName('messageId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $messageId;
    
    /**
     * Reason of bounce (only available if the event is hardbounce or softbounce)
     * 
     * @var ?string $reason
     */
	#[\JMS\Serializer\Annotation\SerializedName('reason')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $reason = null;
    
    /**
     * Subject of the event
     * 
     * @var ?string $subject
     */
	#[\JMS\Serializer\Annotation\SerializedName('subject')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subject = null;
    
    /**
     * Tag of the email which generated the event
     * 
     * @var ?string $tag
     */
	#[\JMS\Serializer\Annotation\SerializedName('tag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tag = null;
    
    /**
     * ID of the template (only available if the email is template based)
     * 
     * @var ?int $templateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('templateId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $templateId = null;
    
	public function __construct()
	{
		$this->date = "";
		$this->email = "";
		$this->event = \test\BREVO\Models\Shared\Event::Bounces;
		$this->from = null;
		$this->ip = null;
		$this->link = null;
		$this->messageId = "";
		$this->reason = null;
		$this->subject = null;
		$this->tag = null;
		$this->templateId = null;
	}
}
