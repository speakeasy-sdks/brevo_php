<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace test\BREVO;

class Conversations 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Delete a message sent by an agent
     * 
     * Only agentsâ€™ messages can be deleted.
     * 
     * @param \test\BREVO\Models\Operations\DeleteConversationsMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\DeleteConversationsMessagesIdResponse
     */
	public function deleteConversationsMessagesId(
        ?\test\BREVO\Models\Operations\DeleteConversationsMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\DeleteConversationsMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/messages/{id}', \test\BREVO\Models\Operations\DeleteConversationsMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\DeleteConversationsMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an automated message
     * 
     * @param \test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdResponse
     */
	public function deleteConversationsPushedMessagesId(
        ?\test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/pushedMessages/{id}', \test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\DeleteConversationsPushedMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a message
     * 
     * @param \test\BREVO\Models\Operations\GetConversationsMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\GetConversationsMessagesIdResponse
     */
	public function getConversationsMessagesId(
        ?\test\BREVO\Models\Operations\GetConversationsMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\GetConversationsMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/messages/{id}', \test\BREVO\Models\Operations\GetConversationsMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\GetConversationsMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an automated message
     * 
     * @param \test\BREVO\Models\Operations\GetConversationsPushedMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\GetConversationsPushedMessagesIdResponse
     */
	public function getConversationsPushedMessagesId(
        ?\test\BREVO\Models\Operations\GetConversationsPushedMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\GetConversationsPushedMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/pushedMessages/{id}', \test\BREVO\Models\Operations\GetConversationsPushedMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\GetConversationsPushedMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets agentâ€™s status to online for 2-3 minutes
     * 
     * We recommend pinging this endpoint every minute for as long as the agent has to be considered online.
     * 
     * @param \test\BREVO\Models\Operations\PostConversationsAgentOnlinePingRequestBody $request
     * @return \test\BREVO\Models\Operations\PostConversationsAgentOnlinePingResponse
     */
	public function postConversationsAgentOnlinePing(
        \test\BREVO\Models\Operations\PostConversationsAgentOnlinePingRequestBody $request,
    ): \test\BREVO\Models\Operations\PostConversationsAgentOnlinePingResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/agentOnlinePing');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\PostConversationsAgentOnlinePingResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a message as an agent
     * 
     * @param \test\BREVO\Models\Operations\PostConversationsMessagesRequestBody $request
     * @return \test\BREVO\Models\Operations\PostConversationsMessagesResponse
     */
	public function postConversationsMessages(
        \test\BREVO\Models\Operations\PostConversationsMessagesRequestBody $request,
    ): \test\BREVO\Models\Operations\PostConversationsMessagesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/messages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\PostConversationsMessagesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send an automated message to a visitor
     * 
     * Example of automated messages: order status, announce new features in your web app, etc.
     * 
     * @param \test\BREVO\Models\Operations\PostConversationsPushedMessagesRequestBody $request
     * @return \test\BREVO\Models\Operations\PostConversationsPushedMessagesResponse
     */
	public function postConversationsPushedMessages(
        \test\BREVO\Models\Operations\PostConversationsPushedMessagesRequestBody $request,
    ): \test\BREVO\Models\Operations\PostConversationsPushedMessagesResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/pushedMessages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\PostConversationsPushedMessagesResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a message sent by an agent
     * 
     * Only agentsâ€™ messages can be edited.
     * 
     * @param \test\BREVO\Models\Operations\PutConversationsMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\PutConversationsMessagesIdResponse
     */
	public function putConversationsMessagesId(
        \test\BREVO\Models\Operations\PutConversationsMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\PutConversationsMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/messages/{id}', \test\BREVO\Models\Operations\PutConversationsMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\PutConversationsMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an automated message
     * 
     * @param \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdRequest $request
     * @return \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdResponse
     */
	public function putConversationsPushedMessagesId(
        \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdRequest $request,
    ): \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/conversations/pushedMessages/{id}', \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \test\BREVO\Models\Operations\PutConversationsPushedMessagesIdResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversationsMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ConversationsMessage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'test\BREVO\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}